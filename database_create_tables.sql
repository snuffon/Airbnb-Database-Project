
/* LONG === NUMBER(19, 0)
   INT === NUMBER(10, 0)
   DOUBLE === FLOAT (24)
   STRING === VARCHAR2(size)
   BOOLEAN === VARCHAR2(1)
   URL_SIZE === 2084
   */

DROP TABLE Calendars;
CREATE TABLE Calendars (
  cid NUMBER(19, 0) GENERATED BY DEFAULT AS IDENTITY,
  lid NUMBER(19, 0) NOT NULL,
  cdate DATE,
  available VARCHAR2(1),
  price FLOAT (24),
  PRIMARY KEY (lid,cid),
  FOREIGN KEY (lid)
  REFERENCES Listings(lid) ON DELETE CASCADE
  );

ALTER TABLE Calendars ADD CONSTRAINT min_price_cal CHECK (price >= 0);

DROP TABLE Reviews;
CREATE TABLE Reviews (
  review_id NUMBER(19, 0) GENERATED BY DEFAULT AS IDENTITY,
  lid NUMBER(19, 0) NOT NULL,
  rdate DATE,
  comments CLOB,
  reviewer_id NUMBER(19,0),
  reviewer_name VARCHAR2(32),
  PRIMARY KEY (review_id),
  FOREIGN KEY (lid)
  REFERENCES Listings(lid) ON DELETE CASCADE
  );

DROP TABLE ListingsHasAmenities;
CREATE TABLE ListingsHasAmenities (
  lid NUMBER(19, 0) NOT NULL,
  aid NUMBER(19, 0) NOT NULL,
  PRIMARY KEY (lid,aid),
  FOREIGN KEY (lid)
  REFERENCES Listings(lid) ON DELETE CASCADE,
  FOREIGN KEY (aid)
  REFERENCES Amenities(aid)
);

DROP TABLE  Amenities;
CREATE TABLE Amenities (
  aid NUMBER(19, 0) GENERATED BY DEFAULT AS IDENTITY,
  aname VARCHAR2(255) UNIQUE NOT NULL,
  PRIMARY KEY (aid)
);

DROP TABLE Listings;
CREATE TABLE Listings (
  lid NUMBER(19, 0),
  host_id NUMBER(19,0) NOT NULL ,
  neighborhood_id NUMBER(19,0) NOT NULL ,
  cancellation_policy_id NUMBER(19,0) NOT NULL ,
  bed_type_id NUMBER(19,0) NOT NULL ,
  room_type_id NUMBER(19,0) NOT NULL ,
  property_type_id NUMBER(19,0) NOT NULL ,
  listing_name VARCHAR2(255),
  listing_url VARCHAR2(2084),
  latitude FLOAT (24),
  longitude FLOAT (24),
  price FLOAT (24),
  weekly_price FLOAT (24),
  monthly_price FLOAT (24),
  security_deposit FLOAT (24),
  cleaning_fee FLOAT (24),
  guests_included NUMBER(10,0),
  extra_people  FLOAT (24),
  minimum_nights NUMBER(10,0),
  maximum_nights NUMBER(10,0),
  accommodates NUMBER(10,0),
  bathrooms FLOAT(24),
  bedrooms NUMBER(10,0),
  beds NUMBER(10,0),
  square_feet NUMBER(10,0),
  rs_rating NUMBER(10,0),
  rs_accuracy NUMBER(10,0),
  rs_cleanliness NUMBER(10,0),
  rs_checking NUMBER(10,0),
  rs_communication NUMBER(10,0),
  rs_rlocation NUMBER(10,0),
  rs_rvalue NUMBER(10,0),
  is_business_travel_ready VARCHAR2(1),
  require_guest_profile_picture VARCHAR2(1),
  require_guest_phone_verification VARCHAR(1),
  summary CLOB, --can be null
  space_description CLOB, --can be null
  description CLOB, --can be null
  neighborhood_overview CLOB, --can be null
  notes CLOB, --can be null
  transit_description CLOB, --can be null
  access_description CLOB, --can be null
  interaction_description CLOB, --can be null
  house_rules CLOB, --can be null
  picture_url VARCHAR2(2084),
  PRIMARY KEY (lid),
  FOREIGN KEY (neighborhood_id)
  REFERENCES Neighborhoods(nid),
  FOREIGN KEY (cancellation_policy_id)
  REFERENCES CancellationPolicy(cp_id),
  FOREIGN KEY (bed_type_id)
  REFERENCES BedType(bed_id),
  FOREIGN KEY (room_type_id)
  REFERENCES RoomType(room_id),
  FOREIGN KEY (property_type_id)
  REFERENCES PropertyType(prop_id),
  FOREIGN KEY (host_id)
  REFERENCES Hosts(hid)
  );


ALTER TABLE Listings ADD CONSTRAINT min_guests CHECK (guests_included >= 0);
ALTER TABLE Listings ADD CONSTRAINT min_price CHECK (price >= 0);
ALTER TABLE Listings ADD CONSTRAINT min_weekly_price CHECK (weekly_price >= 0);
ALTER TABLE Listings ADD CONSTRAINT min_monthly_price CHECK (monthly_price >= 0);
ALTER TABLE Listings ADD CONSTRAINT min_extra_people CHECK (extra_people >= 0);
ALTER TABLE Listings ADD CONSTRAINT min_cleaning_fee CHECK (cleaning_fee >= 0);
ALTER TABLE Listings ADD CONSTRAINT min_security_deposit CHECK (security_deposit >= 0);
ALTER TABLE Listings ADD CONSTRAINT min_minimum_nights CHECK (minimum_nights >= 0);
ALTER TABLE Listings ADD CONSTRAINT min_maximum_nights CHECK (maximum_nights >= 0);
ALTER TABLE Listings ADD CONSTRAINT min_bathrooms CHECK (bathrooms >= 0);
ALTER TABLE Listings ADD CONSTRAINT min_bedrooms CHECK (bedrooms >= 0);
ALTER TABLE Listings ADD CONSTRAINT min_beds CHECK (beds >= 0);
ALTER TABLE Listings ADD CONSTRAINT min_square_feet CHECK (square_feet >= 0);
ALTER TABLE Listings ADD CONSTRAINT min_rating CHECK (rs_rating >= 0);
ALTER TABLE Listings ADD CONSTRAINT min_accuracy CHECK (rs_accuracy >= 0);
ALTER TABLE Listings ADD CONSTRAINT cleanliness CHECK (rs_cleanliness >= 0);
ALTER TABLE Listings ADD CONSTRAINT checking CHECK (rs_checking >= 0);
ALTER TABLE Listings ADD CONSTRAINT communication CHECK (rs_communication >= 0);
ALTER TABLE Listings ADD CONSTRAINT rlocation CHECK (rs_rlocation >= 0);
ALTER TABLE Listings ADD CONSTRAINT rvalue CHECK (rs_rvalue >= 0);


DROP TABLE  CancellationPolicy;
CREATE TABLE CancellationPolicy (
  cp_id NUMBER(19, 0) GENERATED BY DEFAULT AS IDENTITY,
  cancellation_policy VARCHAR2(32) UNIQUE NOT NULL,
  PRIMARY KEY (cp_id)
);

DROP TABLE  BedType;
CREATE TABLE BedType (
  bed_id NUMBER(19, 0) GENERATED BY DEFAULT AS IDENTITY,
  bed_type VARCHAR2(32) UNIQUE NOT NULL,
  PRIMARY KEY (bed_id)
);

DROP TABLE  RoomType;
CREATE TABLE RoomType (
  room_id NUMBER(19, 0) GENERATED BY DEFAULT AS IDENTITY,
  room_type VARCHAR2(32) UNIQUE NOT NULL,
  PRIMARY KEY (room_id)
);

DROP TABLE  PropertyType;
CREATE TABLE PropertyType (
  prop_id NUMBER(19, 0) GENERATED BY DEFAULT AS IDENTITY,
  property_type VARCHAR2(32) UNIQUE NOT NULL,
  PRIMARY KEY (prop_id)
);


DROP TABLE  HostsHasVerifications;
CREATE TABLE HostsHasVerifications (
  hid NUMBER(19, 0) NOT NULL,
  vid NUMBER(19, 0) NOT NULL,
  PRIMARY KEY (hid,vid),
  FOREIGN KEY (hid)
  REFERENCES Hosts(hid) ON DELETE CASCADE,
  FOREIGN KEY (vid)
  REFERENCES Verifications(vid)
  );


DROP TABLE Hosts;
CREATE TABLE Hosts (
  hid NUMBER(19, 0),
  neighborhood_id NUMBER(19,0) NOT NULL,
  response_time_id NUMBER(19,0),
  url VARCHAR2(2084) NOT NULL,
  name VARCHAR2(255) NOT NULL,
  since DATE NOT NULL,
  about CLOB,
  response_rate NUMBER(10,0),
  thumbnail_url VARCHAR2(2084) NOT NULL,
  picture_url VARCHAR2(2084) NOT NULL,
  PRIMARY KEY (hid),
  FOREIGN KEY (neighborhood_id) REFERENCES Neighborhoods(nid),
  FOREIGN KEY (response_time_id) REFERENCES ResponseTime(resid)
);

ALTER TABLE Hosts ADD CONSTRAINT min_rate CHECK (response_rate >= 0);
ALTER TABLE Hosts ADD CONSTRAINT max_rate CHECK (response_rate <= 100);

Select * from hosts;

DROP TABLE  Verifications;
CREATE TABLE Verifications (
  vid NUMBER(19, 0) GENERATED BY DEFAULT AS IDENTITY,
  vname VARCHAR2(32) UNIQUE NOT NULL,
  PRIMARY KEY (vid)
);


DROP TABLE  ResponseTime;
CREATE TABLE ResponseTime (
  resid NUMBER(19, 0) GENERATED BY DEFAULT AS IDENTITY,
  response VARCHAR2(32) UNIQUE NOT NULL,
  PRIMARY KEY (resid)
);


DROP TABLE  Neighborhoods;
CREATE TABLE Neighborhoods(
    nid NUMBER(19, 0) GENERATED BY DEFAULT AS IDENTITY,
    city_id NUMBER(19,0) NOT NULL,
    neighborhood_name VARCHAR2(32) NOT NULL,

    PRIMARY KEY (nid),
    FOREIGN KEY (city_id) REFERENCES City(city_id)
);


DROP TABLE  City;
CREATE TABLE City(
    city_id NUMBER(19, 0) GENERATED BY DEFAULT AS IDENTITY,
    country_id NUMBER(19,0) NOT NULL,
    city_name VARCHAR2(32) NOT NULL,

    PRIMARY KEY (city_id),
    FOREIGN KEY (country_id) REFERENCES Country(country_id)

);


DROP TABLE  Country;
CREATE TABLE Country(
    country_id NUMBER(19, 0) GENERATED BY DEFAULT AS IDENTITY,
    country_name VARCHAR2(32) NOT NULL,
    country_code VARCHAR2(32) NOT NULL,

    PRIMARY KEY (country_id)
);






-- Milestone 2
/*  -------- 1 --------  */

SELECT AVG(L.price)
FROM Listings L
WHERE L.bedrooms = 8;

/*
SELECT AVG(R.price)
FROM FEATURES F, Rents R
WHERE F.lid = R.lid AND F.bedrooms = 8;
*/

/*  -------- 2 --------  */

SELECT AVG(L.rs_cleanliness)
FROM Listings L, ListingsHasAmenities LA, Amenities A
WHERE L.lid = LA.lid AND LA.aid = A.aid AND A.ANAME = 'TV';

/*
SELECT AVG(RS.cleanliness)
FROM ReviewScores RS, ListingsHasAmenities LA
WHERE RS.lid = LA.lid AND LA.name = 'TV';
*/

/*  -------- 3 --------  */

SELECT DISTINCT L.host_id
FROM Listings L
WHERE  L.lid IN (
SELECT Cal.lid
FROM Calendars Cal
WHERE Cal.available = 't' AND Cal.cdate BETWEEN TO_DATE('2019-03-01', 'YYYY-MM-DD') AND TO_DATE('2019-09-30', 'YYYY-MM-DD'));

/*  -------- 4 --------  */

  --  if != doesn't work, use <>

SELECT COUNT(L.lid)
FROM  Listings L
WHERE L.host_id IN (
  SELECT DISTINCT H1.hid
  FROM Hosts H1, Hosts H2
  WHERE H1.hid != H2.hid AND H1.name = H2.name
  );

/*  -------- 5 --------  */

--SELECT DISTINCT Cal.cdate
--FROM Calendars Cal
--WHERE Cal.available = 't' AND Cal.lid IN (SELECT Listings.lid
--FROM Listings
--INNER JOIN (SELECT Hosts.hid FROM Hosts WHERE Hosts.name='Viajes Eco') AS NHosts ON Listings.host_id=NHosts.hid);


--SELECT DISTINCT Cal.cdate
--FROM Calendars Cal
--WHERE Cal.available = 't' AND Cal.lid IN (SELECT Listings.lid
--FROM Listings
--INNER JOIN (Hosts) ON Listings.host_id=Hosts.hid AND Hosts.name='Viajes Eco');



SELECT DISTINCT Cal.cdate
FROM Calendars Cal
WHERE Cal.available = 't' AND Cal.lid IN (SELECT L.lid
FROM Listings L , Hosts H
WHERE L.host_id=H.hid AND H.name='Viajes Eco');

/*  -------- 6 --------  */

-- Notre id√©e : Group by sur le hostId et ensuite count

SELECT H.hid, H.name
FROM Hosts H
WHERE H.hid IN (
  SELECT L.host_id
  FROM Listings L
  GROUP BY L.host_id
  HAVING COUNT(*) = 1
)


/*  -------- 7 --------  */


SELECT Wifi.PRICE - noWifi.PRICE
FROM(
SELECT AVG(L.price) AS PRICE
FROM Listings L, ListingsHasAmenities LHA, Amenities A
WHERE L.lid = LHA.lid AND LHA.aid = A.aid AND A.aname = 'Wifi') Wifi,

(SELECT AVG(L.price) AS PRICE
FROM Listings L
WHERE L.lid NOT IN (
  SELECT LHA.lid
  FROM ListingsHasAmenities LHA, Amenities A
  WHERE LHA.aid = A.aid AND A.aname = 'Wifi'
)) noWifi;

/*  -------- 8 --------  */

SELECT BERLIN.PRICE - MADRID.PRICE
FROM(
SELECT AVG(L.price) AS PRICE
FROM Listings L, Neighborhoods N, City C
WHERE L.bedrooms = 8  AND L.neighborhood_id = N.nid AND N.city_id = C.city_id AND C.city_name = 'berlin' ) BERLIN,

(
SELECT AVG(L.price) AS PRICE
FROM Listings L, Neighborhoods N, City C
WHERE L.bedrooms = 8  AND L.neighborhood_id = N.nid AND N.city_id = C.city_id AND C.city_name = 'madrid' ) MADRID;

/*  -------- 9 --------  */
SELECT * FROM (

SELECT H.hid, H.name
FROM Hosts H
LEFT JOIN Listings L ON L.host_id = H.hid 
WHERE H.neighborhood_id IN (
	SELECT N.nid
	FROM Neighborhoods N, City C, Country Co
	WHERE N.city_id=C.city_id AND C.country_id=Co.country_id AND Co.country_code = 'ES'
) 
GROUP BY H.hid, H.name
ORDER BY COUNT(*) DESC
)
WHERE ROWNUM <= 10;

/*  -------- 10 --------  */
SELECT * FROM (
  SELECT L.lid, L.listing_name
  FROM Listings L, Neighborhoods N, City C, PropertyType P
  WHERE L.neighborhood_id = N.nid AND N.city_id = C.city_id AND C.city_name = 'barcelona' AND L.rs_rating >= 0
  AND L.property_type_id = P.prop_id AND P.property_type = 'Apartment'
  ORDER BY L.rs_rating DESC
)
WHERE ROWNUM <= 10;

/*  -------- 11 --------  */

SELECT C.city_name, COUNT(*)
FROM City C, Neighborhoods N, Hosts H
WHERE H.neighborhood_id = N.nid AND N.city_id = C.city_id
AND H.hid IN (
  SELECT DISTINCT L.host_id
  FROM Listings L
  WHERE L.square_feet > 0
)
GROUP BY C.city_name 
ORDER BY C.city_name 

/*  -------- 12 --------  */

/*SELECT N.NID, N.NEIGHBORHOOD_NAME
FROM (SELECT COUNT(*) AS nbr_listings
FROM NEIGHBORHOODS N, LISTINGS L
WHERE N.nid = L.NEIGHBORHOOD_ID AND N.NID IN (
	SELECT H.nid
	FROM Neighborhoods H, City C
	WHERE H.city_id=C.city_id AND C.CITY_NAME = 'madrid'
)
GROUP BY N.NID, N.NEIGHBORHOOD_NAME) neilist_tab,
(SELECT L.LID*/

SELECT * FROM (
  SELECT N.nid, N.neighborhood_name
  FROM Neighborhoods N, (
    SELECT Neighb_ratings.nid as Nid, Neighb_ratings.rating as median
    FROM (
      SELECT L.neighborhood_id as nid, COUNT(*) as nbr
      FROM Listings L, Neighborhoods N, City C
      WHERE L.rs_rating >= 0 AND L.neighborhood_id = N.nid AND N.city_id=C.city_id AND C.CITY_NAME = 'madrid'
      GROUP BY L.neighborhood_id
    ) Neighb_nbrListings,
    (
      SELECT L.neighborhood_id as nid, L.rs_rating as rating, row_number() over (partition by N.nid order by L.rs_rating DESC) 
        as rownbr
      FROM Listings L, Neighborhoods N, City C
      WHERE L.rs_rating >= 0 AND L.neighborhood_id = N.nid AND N.city_id=C.city_id AND C.CITY_NAME = 'madrid'
    ) Neighb_ratings
    WHERE Neighb_nbrListings.nid = Neighb_ratings.nid AND Neighb_ratings.rownbr = Neighb_nbrListings.nbr/2
  ) Neighb_medians
  WHERE N.nid = Neighb_medians.Nid
  ORDER BY Neighb_medians.median DESC
) WHERE ROWNUM <= 5;


/*  -------- 13 --------  */
SELECT M.hid, M.name
FROM (
SELECT H.hid AS hid, H.name AS name, COUNT(*) as nbr_listings
FROM Hosts H, Listings L
WHERE H.hid = L.host_id
GROUP BY H.hid, H.name
ORDER BY COUNT(*) DESC

) M
WHERE( M.nbr_listings IN (SELECT * FROM (SELECT COUNT(*) as nbr_listings
FROM Hosts H, Listings L
WHERE H.hid = L.host_id
GROUP BY H.hid, H.name
ORDER BY COUNT(*) DESC

) M2 WHERE ROWNUM = 1));

/*  -------- 14 --------  */

SELECT * FROM(
SELECT selected.LID, selected.NAME
FROM CALENDARS Cal 
LEFT OUTER JOIN(
SELECT L.LID AS LID, L.LISTING_NAME AS NAME
FROM Listings L 
LEFT OUTER JOIN propertytype P ON P.prop_id = L.PROPERTY_TYPE_ID 
LEFT OUTER JOIN NEIGHBORHOODS N ON L.NEIGHBORHOOD_ID = N.NID
LEFT OUTER JOIN City C ON N.city_id = C.city_id
LEFT OUTER JOIN CANCELLATIONPOLICY CP ON L.CANCELLATION_POLICY_ID = CP.CP_ID
WHERE P.PROPERTY_TYPE = 'Apartment' AND C.CITY_NAME = 'berlin'
AND L.BEDS >= 2 AND L.RS_RLOCATION >= 8 AND CP.CANCELLATION_POLICY = 'flexible'
AND L.HOST_ID IN (SELECT HHV.HID
                  FROM HOSTSHASVERIFICATIONS HHV, VERIFICATIONS V
                  WHERE HHV.VID = V.VID AND V.VNAME = 'government_id')
) selected ON selected.LID = Cal.LID
WHERE Cal.AVAILABLE = 't' AND Cal.cdate BETWEEN TO_DATE('2019-03-01', 'YYYY-MM-DD') AND TO_DATE('2019-04-30', 'YYYY-MM-DD')
GROUP BY selected.LID, selected.NAME
ORDER BY AVG (Cal.PRICE) DESC
) WHERE ROWNUM <= 5;

/*  -------- 15 --------  */
SELECT rs.ACCOMMODATES, rs.LID, rs.LISTING_NAME, rs.RS_RATING
  FROM(
    SELECT L.ACCOMMODATES, L.LID, L.LISTING_NAME, L.RS_RATING, ROW_NUMBER () over (Partition BY L.ACCOMMODATES ORDER BY L.RS_RATING DESC NULLS LAST) AS rownumber
      FROM(
        SELECT list_with_amenities.LID 
          FROM(
            SELECT LHA.LID AS LID, COUNT(*) AS nbr_facilities
              FROM LISTINGSHASAMENITIES LHA LEFT OUTER JOIN AMENITIES A ON LHA.AID = A.AID
              WHERE A.ANAME = 'Wifi' OR A.ANAME = 'Internet' OR A.ANAME = 'TV' OR A.ANAME = 'Free street parking'
              GROUP BY LHA.LID
          ) list_with_amenities
          WHERE list_with_amenities.nbr_facilities >= 2
      ) selected INNER JOIN LISTINGS L ON selected.LID = L.LID
  ) rs WHERE rs.rownumber <= 5;

/*  -------- 16 --------  */
SELECT rs.HOST_ID, rs.total_reviews, rs.LID, rs.LISTING_NAME
  FROM(
    SELECT reduced_listings.HOST_ID, reduced_listings.LID, reduced_listings.LISTING_NAME, reduced_reviews.total_reviews,
            ROW_NUMBER () OVER (PARTITION BY reduced_listings.HOST_ID ORDER BY reduced_reviews.total_reviews DESC) AS row_number
      FROM
        (SELECT L.LID, L.HOST_ID, L.LISTING_NAME
        FROM LISTINGS L) reduced_listings
        INNER JOIN
        (SELECT R.LID, COUNT(*) AS total_reviews
        FROM REVIEWS R
        GROUP BY R.LID) reduced_reviews
        ON reduced_listings.LID = reduced_reviews.LID
      ORDER BY reduced_listings.HOST_ID) rs
  WHERE row_number <= 3;

/*  -------- 17 --------  */
SELECT rs.NID, rs.NEIGHBORHOOD_NAME, rs.AID, rs.ANAME
  FROM(
    SELECT count.AID, count.ANAME, count.NID, count.NEIGHBORHOOD_NAME,
    ROW_NUMBER() over (PARTITION BY count.NID ORDER BY count.total DESC) AS row_number
      FROM(
        SELECT inner_ln.NID, inner_ln.NEIGHBORHOOD_NAME, LHM.AID, A.ANAME, COUNT(*) AS total
        FROM(
          SELECT L.LID, N.NID, N.NEIGHBORHOOD_NAME
          FROM LISTINGS L INNER JOIN NEIGHBORHOODS N on L.NEIGHBORHOOD_ID = N.NID
                          INNER JOIN CITY C ON N.CITY_ID = C.CITY_ID
                          INNER JOIN ROOMTYPE RT ON RT.ROOM_ID = L.ROOM_TYPE_ID
          WHERE RT.ROOM_TYPE = 'Private room' AND C.CITY_NAME = 'berlin') inner_ln
        INNER JOIN
        LISTINGSHASAMENITIES LHM ON inner_ln.LID = LHM.LID
        INNER JOIN
        AMENITIES A ON LHM.AID = A.AID
        GROUP BY inner_ln.NID, LHM.AID, A.ANAME, inner_ln.NEIGHBORHOOD_NAME) count
      ORDER BY count.NID) rs
  WHERE rs.row_number <= 3;

/*  -------- 18 --------  */

SELECT most_diverse_scores.avrg - least_diverse_scores.avrg
FROM (
  SELECT AVG(L.rs_communication) as avrg
  FROM Listings L, (
    SELECT diverse_hosts.hid as hid
    FROM (
      SELECT HHV.hid as hid
      FROM HostsHasVerifications HHV
      -- here we make sure that this host has at least one listing with non-null rs_communication
      WHERE HHV.hid IN (
        SELECT DISTINCT L.host_id
        FROM Listings L
        WHERE L.rs_communication >= 0
        -- Bonus : we make sure that this host has multiple listings for more interesting results
        GROUP BY L.host_id
        HAVING COUNT(*) > 10
      )
      GROUP BY HHV.HID
      ORDER BY COUNT(*) DESC
    ) diverse_hosts
    WHERE ROWNUM = 1
  ) most_diverse_host
  WHERE L.host_id = most_diverse_host.hid
) most_diverse_scores,
(
  SELECT AVG(L.rs_communication) as avrg
  FROM Listings L, (
    SELECT not_diverse_hosts.hid as hid
    FROM (
      SELECT DISTINCT L.host_id as hid
      FROM Listings L
      WHERE L.rs_communication >= 0
      AND L.host_id NOT IN (
        SELECT DISTINCT HHV.hid
        FROM HostsHasVerifications HHV
      )
    ) not_diverse_hosts
    WHERE ROWNUM = 1
  ) least_diverse_host
  WHERE L.host_id = least_diverse_host.hid
) least_diverse_scores;

/*  -------- 19 --------  */

SELECT * 
FROM (
  SELECT C.city_name
  FROM City C 
  LEFT JOIN Neighborhoods N ON C.city_id = N.city_id
  LEFT JOIN Listings L ON N.nid = L.neighborhood_id
  LEFT JOIN REVIEWS R ON L.lid = R.lid 
  WHERE L.room_type_id IN (
    SELECT rtype_accomodates.id 
    FROM (
      SELECT L.room_type_id AS id, AVG(L.accommodates) AS avrg
      FROM Listings L
      GROUP BY L.room_type_id
    ) rtype_accomodates
    WHERE rtype_accomodates.avrg > 3
  )
  GROUP BY C.city_name
  ORDER BY COUNT(*) DESC
)
WHERE ROWNUM = 1

/*  -------- 20 --------  */

SELECT N.nid, N.neighborhood_name
FROM Neighborhoods N, (
  SELECT L.neighborhood_id as nid, COUNT(*) as nbr
  FROM Listings L, Hosts H, Neighborhoods N, City C 
  WHERE L.lid IN (
    SELECT DISTINCT Cal.lid 
    FROM CALENDARS Cal
    WHERE Cal.cdate >= TO_DATE('2019-01-01', 'YYYY-MM-DD') AND Cal.available = 'f'
  ) AND L.host_id = H.hid AND H.since < TO_DATE('2017-06-01', 'YYYY-MM-DD') AND L.neighborhood_id = N.nid 
  AND N.city_id = C.city_id AND C.city_name = 'madrid'
  GROUP BY L.neighborhood_id
) neighb_available, (
  SELECT L.neighborhood_id as nid, COUNT(*) as nbr
  FROM Listings L
  GROUP BY L.neighborhood_id
) neighb_total
WHERE N.nid = neighb_available.nid AND N.nid = neighb_total.nid AND 2*neighb_available.nbr >= neighb_total.nbr;

/*  -------- 21 --------  */

SELECT C.country_name
FROM Country C, (
  SELECT C.country_id AS cid, COUNT(*) AS nbr
  FROM City C 
  LEFT JOIN Neighborhoods N ON N.city_id = C.city_id
  LEFT JOIN Listings L ON N.nid = L.neighborhood_id
  WHERE L.lid IN (
    SELECT DISTINCT Cal.lid 
    FROM Calendars Cal 
    WHERE Cal.available = 't' AND Cal.cdate BETWEEN TO_DATE('2018-01-01', 'YYYY-MM-DD') AND TO_DATE('2018-12-31', 'YYYY-MM-DD')
  )
  GROUP BY C.country_id
) ctry_available, (
  SELECT C.country_id AS cid, COUNT(*) AS nbr
  FROM City C 
  LEFT JOIN Neighborhoods N ON N.city_id = C.city_id
  LEFT JOIN Listings L ON N.nid = L.neighborhood_id
  GROUP BY C.country_id
) ctry_total
WHERE C.country_id = ctry_available.cid AND C.country_id = ctry_total.cid AND 5*ctry_available.nbr >= ctry_total.nbr

/*  -------- 22 --------  */

SELECT N.nid, N.neighborhood_name
FROM Neighborhoods N, (
  SELECT L.neighborhood_id AS nid, COUNT(*) as nbr
  FROM Listings L, Neighborhoods N, City C, CancellationPolicy CP
  WHERE L.neighborhood_id = N.nid AND N.city_id = C.city_id AND C.city_name = 'barcelona' 
  AND L.cancellation_policy_id = CP.cp_id AND CP.cancellation_policy = 'strict_14_with_grace_period'
  GROUP BY L.neighborhood_id
) neighb_grace_period, (
  SELECT L.neighborhood_id AS nid, COUNT(*) as nbr
  FROM Listings L, Neighborhoods N, City C
  WHERE L.neighborhood_id = N.nid AND N.city_id = C.city_id AND C.city_name = 'barcelona'
  GROUP BY L.neighborhood_id
) neighb_total
WHERE N.nid = neighb_grace_period.nid AND N.nid = neighb_total.nid AND 20*neighb_grace_period.nbr >= neighb_total.nbr;

-- After trying different parameters, it seems that the 5% condition isn't really interesting : Listings have
-- this cancellation policy far more often than that
